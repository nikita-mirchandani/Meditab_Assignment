CREATE SEQUENCE IF NOT EXISTS seq1 
	increment 1 
	start 1;
CREATE SEQUENCE IF NOT EXISTS seq2 
	increment 1 
	start 1;

CREATE TABLE SEX(
  SEX_ID SERIAL PRIMARY KEY,
  GENDER VARCHAR(20)
);
INSERT INTO SEX(GENDER) VALUES('male');
INSERT INTO SEX(GENDER) VALUES('female');
INSERT INTO SEX(GENDER) VALUES('unknown');
SELECT * FROM SEX;

CREATE TABLE PHONE_TYPE(
  PHONE_ID SERIAL PRIMARY KEY,
  PHONE_TYPE VARCHAR(20)
);
INSERT INTO PHONE_TYPE(PHONE_TYPE) VALUES('CELL');
INSERT INTO PHONE_TYPE(PHONE_TYPE) VALUES('LANDLINE');
SELECT * FROM PHONE_TYPE;


CREATE TABLE ADDRESS_TYPES(
  ADDRESS_ID SERIAL PRIMARY KEY,
  ADDRESS_TYPE VARCHAR(20)
);
INSERT INTO ADDRESS_TYPES(ADDRESS_TYPE) VALUES('WORK');
INSERT INTO ADDRESS_TYPES(ADDRESS_TYPE) VALUES('HOME');
SELECT * FROM ADDRESS_TYPES;


CREATE TABLE RACE_TYPE(
  RACE_ID SERIAL PRIMARY KEY,
  RACE_TYPE VARCHAR(20)
);
INSERT INTO RACE_TYPE(RACE_TYPE) VALUES('ASIAN');
INSERT INTO RACE_TYPE(RACE_TYPE) VALUES('AMERICAN');
SELECT * FROM RACE_TYPE;

CREATE TABLE IF NOT EXISTS Patient(
  PATIENT_ID VARCHAR(20) NOT NULL DEFAULT to_char(nextval('seq1'),'0000FM'),
  CHART_NUMBER VARCHAR(20) NOT NULL DEFAULT to_char(nextval('seq2'),'EMP0000FM'),
  FIRST_NAME VARCHAR(20) NOT NULL,
  LAST_NAME VARCHAR(20) NOT NULL,
  MIDDLE_NAME VARCHAR(20),
  DOB DATE,
  SEX INT,
  created_on timestamp default CURRENT_TIMESTAMP not null,
  PRIMARY KEY(PATIENT_ID),
  CONSTRAINT sex_constraint FOREIGN KEY(SEX) REFERENCES SEX(SEX_ID)
);
SET timezone = 'Asia/Calcutta';
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('NIKITA','MIRCHANDANI','M',2);
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('NIKITA','MIRCHANDANI','M',2);
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('fb','dv','M',1);
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('meet','Vachhani','M',1);
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('meet','Patel','M',1);
INSERT into Patient (FIRST_NAME,LAST_NAME,MIDDLE_NAME,SEX) VALUES ('meet','Vachhani','M',1);
SELECT * from Patient;

CREATE TABLE RACE(
  RACE_ID SERIAL PRIMARY KEY,
  RACE_TYPE INT NOT NULL,
  PATIENT_ID VARCHAR(20),
  CONSTRAINT race_id FOREIGN KEY(RACE_TYPE) REFERENCES RACE_TYPE(RACE_ID),
  CONSTRAINT patient_id FOREIGN KEY(PATIENT_ID) REFERENCES Patient(PATIENT_ID)
);
INSERT INTO RACE(RACE_TYPE,PATIENT_ID) VALUES(1,'0001');
SELECT * FROM RACE;


CREATE TABLE ADDRESS(
  ADDRESS_ID SERIAL PRIMARY KEY,
  ADDRESS_TYPE INT NOT NULL,
  STREET VARCHAR(20),
  CITY VARCHAR(20),
  ZIP INT,
  STATE VARCHAR(20),
  COUNTRY VARCHAR(20),
  PATIENT_ID VARCHAR(20),
  PRIMARY_ADDRESS BOOLEAN,
  CONSTRAINT user_id FOREIGN KEY(PATIENT_ID) REFERENCES Patient(PATIENT_ID),
  CONSTRAINT ADDRESS_TYPE_CONSTRAINT FOREIGN KEY(ADDRESS_TYPE) REFERENCES ADDRESS_TYPES(ADDRESS_ID)
);
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0001');
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0002');
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0003');
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0004');
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0005');
INSERT INTO ADDRESS(ADDRESS_TYPE,STREET,CITY,ZIP,PATIENT_ID) VALUES(1,'STREET','rajkot',387630,'0006');

SELECT * FROM ADDRESS;

CREATE TABLE PHONE(
  PHONE_ID SERIAL PRIMARY KEY,
  PHONE_NUMBER VARCHAR(10) NOT NULL,
  PHONE_TYPE INT,
  PRIMARY_PHONE BOOLEAN,
  ADDRESS_ID INT,
  CONSTRAINT address_id_constraint FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID),
  CONSTRAINT phone_type_constraint FOREIGN KEY(PHONE_TYPE) REFERENCES PHONE_TYPE(PHONE_ID)
);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (8849126581,1,false,1);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (9856982563,1,false,2);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (5588996685,1,false,3);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (7788554411,1,false,4);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (8855226699,1,false,5);
INSERT into PHONE(PHONE_NUMBER,PHONE_TYPE,PRIMARY_PHONE,ADDRESS_ID) VALUES (3355668822,1,false,6);

SELECT * from PHONE;

CREATE TABLE FAX(
  FAX_ID SERIAL PRIMARY KEY,
  FAX_NUMBER VARCHAR(10) NOT NULL,
  PRIMARY_FAX BOOLEAN,
  ADDRESS_ID INT,
  CONSTRAINT address_id_constraint FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);
INSERT into FAX(ADDRESS_ID,FAX_NUMBER,PRIMARY_FAX) VALUES (1,5313,false);
SELECT * from FAX;
CREATE or REPLACE VIEW demographics AS
    SELECT Patient.FIRST_NAME,Patient.LAST_NAME,Patient.MIDDLE_NAME,Patient.DOB,Patient.CHART_NUMBER,Patient.SEX,RACE.RACE_ID,ADDRESS.PRIMARY_ADDRESS,PHONE.PRIMARY_PHONE,FAX.PRIMARY_FAX
    FROM ((((Patient NATURAL FULL OUTER JOIN ADDRESS)
    NATURAL FULL OUTER JOIN FAX) NATURAL FULL OUTER JOIN PHONE)NATURAL FULL OUTER JOIN RACE);

SELECT * FROM demographics;

SELECT FIRST_NAME,LAST_NAME,DOB,SEX,COUNT(*) 
FROM Patient 
GROUP BY FIRST_NAME,LAST_NAME,DOB,SEX;
-- SELECT COUNT( DISTINCT FIRST_NAME) FROM Patient;

Create function generate_primary_key(FIRST_NAME VARCHAR(20), LAST_NAME VARCHAR(20),MIDDLE_NAME VARCHAR(20),DOB DATE, Sex INT)  
returns int  
language plpgsql  
as  
$$  
Declare 

Begin  
  INSERT INTO Patient(FIRST_NAME,LAST_NAME,MIDDLE_NAME,DOB,SEX) values(FIRST_NAME,LAST_NAME,MIDDLE_NAME,DOB,Sex);
  return (SELECT PATIENT_ID FROM Patient ORDER BY created_on DESC LIMIT 1);  
End;  
$$;  

SELECT generate_primary_key('ruchit','shah','M','2002-01-01',1);

SELECT generate_primary_key('Dhruvil','shah','M','2002-01-01',1);

SELECT generate_primary_key('Dhruvil','shah','M','2002-01-01',2);

SELECT generate_primary_key('Raj','chopda','M','2002-01-01',1);
SELECT * from Patient;

-- sorted function
-- Create function get_sortedData() 
-- returns TABLE (
--   LAST_NAME varchar,
--   FIRST_NAME varchar,
--   SEX INT,
--   DOB date
-- )
-- language plpgsql  
-- AS 
-- $$
-- BEGIN
--   RETURN QUERY
--   SELECT Patient.LAST_NAME,Patient.FIRST_NAME,Patient.SEX,Patient.DOB FROM Patient
--   ORDER BY LAST_NAME ASC ,FIRST_NAME ASC, SEX ASC, DOB ASC OFFSET 0 LIMIT 5;
  
-- END;
-- $$;


-- SELECT * from get_sortedData();


CREATE OR REPLACE FUNCTION paging(
 PageNumber INTEGER = NULL,
 PageSize INTEGER = NULL
 )
 RETURNS TABLE (
  LAST_NAME varchar,
  FIRST_NAME varchar,
  SEX INT,
  DOB date
) AS
 $BODY$
 BEGIN
  RETURN QUERY
  SELECT Patient.LAST_NAME,Patient.FIRST_NAME,Patient.SEX,Patient.DOB FROM Patient
  ORDER BY LAST_NAME ASC ,FIRST_NAME ASC, SEX ASC, DOB ASC
  LIMIT PageSize
  OFFSET ((PageNumber-1) * PageSize);
END;
$BODY$
LANGUAGE plpgsql;

Select * from paging(1,4);
Select * from paging(2,3);
Select * from paging(3,3);

SELECT * FROM PHONE;
SELECT * FROM Patient;
SELECT * FROM ADDRESS;

-- SELECT Phone.*,Patient.FIRST_NAME FROM PHONE,Patient
-- WHERE IN (
-- SELECT Patient.*,ADDRESS.*
-- FROM Patient
-- INNER JOIN ADDRESS
-- ON Patient.patient_id = ADDRESS.patient_id);



SELECT
              p.FIRST_NAME,Ph.PHONE_NUMBER,add.ADDRESS_ID
FROM
              Patient p
              INNER JOIN ADDRESS add ON add.PATIENT_ID = P.PATIENT_ID
              INNER JOIN Phone Ph ON ph.ADDRESS_ID = add.ADDRESS_ID
WHERE Ph.PHONE_NUMBER = '3355668822';


